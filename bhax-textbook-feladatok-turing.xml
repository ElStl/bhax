<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó: <link xlink:href="link">https://youtu.be/m1v0AEZvwQM</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/infty-f.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/infty-f.c</filename>
            </link>, 
            <link xlink:href="Turing/infty-w.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/infty-w.c</filename>
            </link>.
        </para>
        <para>
            Végtelen ciklust általában azért hozunk létre, hogy olyan folyamatot futtassunk, aminek nem akarjuk, hogy valamikor is vége legyen, szóval nem kötjük a futását feltételhez. Ezt a megoldást sok helyen tapasztalhatjuk a való életben is, ilyek pédául az órák, jelzőlámpák, esetleges szerverfolyamatok. Viszont végtelen ciklus bug miatt is létrejöhet és ez nagyban megnehezítheti a dolgunkat, ezért óvatosnak kell lennünk, hogy mikor használunk ilyet.
        </para>                    
        <para>
            Egy mag 100 százalékban:               
        </para>
        <programlisting language="c"><![CDATA[int
main ()
{
  for (;;);

  return 0;
}
]]>
        </programlisting>        
        <para>        
        vagy az olvashatóbb, de a programozók és fordítók (szabványok) között kevésbé hordozható
        </para>
        <programlisting language="c"><![CDATA[int
#include <stdbool.h>
main ()
{
  while(true);

  return 0;
}
]]>
        </programlisting>
        <para>
            Egyébként a fordító a <literal>for</literal>-os és 
            <literal>while</literal>-os ciklusból ugyanazt az assembly kódot fordítja:
        </para>            
        <screen><![CDATA[$ gcc -S -o infty-f.S infty-f.c 
$ gcc -S -o infty-w.S infty-w.c 
$ diff infty-w.S infty-f.S 
1c1
< 	.file	"infty-w.c"
---
> 	.file	"infty-f.c"
]]></screen>
<para>
<mediaobject>
<imageobject>
<imagedata fileref="img/egymag100.png" scale="50" />
</imageobject>
</mediaobject>
</para>
        <para>
            Egy mag 0 százalékban:               
        </para>        
        <programlisting language="c"><![CDATA[#include <unistd.h>
int
main ()
{
  for (;;)
    sleep(1);
    
  return 0;
}
]]>
        </programlisting>
<para>
<mediaobject>
<imageobject>
<imagedata fileref="img/egymag0.png" scale="50" />
</imageobject>
</mediaobject>
</para>        
        <para>
            Minden mag 100 százalékban:               
        </para>

        <programlisting language="c"><![CDATA[#include <omp.h>
int
main ()
{
#pragma omp parallel
{
  for (;;);
}
  return 0;
}
]]>
        </programlisting>
<para>
<mediaobject>     
<imageobject>
<imagedata fileref="img/mindenmag100.png" scale="50" />
</imageobject> 
</mediaobject> 
</para>
<para>
Tanulságok, tapasztalatok, magyarázat... Ha egy magon 0%-os processzorhasználathoz az volt az elgondolás, hogy "elaltatjuk" a programot, akkor nem lesz kimutatható a processzorhasználat. Az egy magnak pedig a 100%-os terhelése egyszerűen úgy működik, hogy a programot egy teljesen "üresen" járatjuk egy végtelen ciklussal.
</para>
        <tip>
            <title>Werkfilm</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <link xlink:href="link">https://youtu.be/lvmi6tyz-nI</link>
                    </para>    
                </listitem>                
            </itemizedlist>                
        </tip>
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
	    Ez a feladat egy igen ismert problémát mutat be. A probléma abból áll, hogy el lehet-e dönteni egy porgramról adott bemenet esetén, hogy végtelen ciklusba kerül-e. Alan Turing bizonyította be, hogy nem lehetséges olyan általános algoritmust írni, amely minden program-bemenet párról megmondja, hogy végtelen ciklusba kerül-e.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:
        </para>
	<para>
	Viszont ha segédváltozók nélkül szeretnénk megváltoztatni egymás értékeire (ha csak két számunk van) akkor erre itt van egy példa:
	</para>
<para>
Segédváltozó nélkül:
</para>
	<screen><![CDATA[
#include<stdio.h>

int main(){
    int x=18;
    int y=22;
    printf("a=%d, b=%d\n", a, b);
    y=y-x
    x=x+y
    y=x-y
    printf("a=%d, b=%d\n", a, b);
}
	]]></screen>
<para>
Segédváltozó nélkül ezen a példán úgy lehet bemutatni, hogy aaz elején megadott értékek vagyis az x=18 és az y=22, az első helyen az y egyenlővé tettük "y-x"-el (22-18=4), ezután az x-et egyenlővé tettük az "x+y"-al (18+4=22) így kaptuk meg az y eredeti értékét és a végén még az y-ból kivontuk a különbséget (22-4=18) ez lett az x eredi értéke.
</para>
<para>
Segédváltozóval:
</para>
<screen><![CDATA[
#include<stdio.h>

int main()
{
    int a=5;
    int b=4;
    printf("a=%d, b=%d\n", a, b);
    int tmp = a;
    a=b;
    b=tmp;
    printf("a=%d, b=%d\n", a, b);
    return 0;
}
	]]></screen>
<para>
            A változófelcserélés egy igen egyszerű feladat ezt megoldhatjuk segédváltozóval vagy nélküle. Ha segédváltozóval csináljuk akkor be kell vezetni egy új változót, amiben az egyik értékét eltároljuk ennek az eredeti változóját megváltoztatni a másikra, és utána az első változónak a segédváltozóban elmentett értékére megváltoztatni a másikat is.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/VutomH0a8js">https://youtu.be/VutomH0a8js</link>
        </para>
<para>
            Megoldás forrása: <link xlink:href="Turing/infty-f.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/Labdapattogtatás/labdapattogtatasifel.c</filename>
            </link>, 
            <link xlink:href="Turing/infty-w.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing//Labdapattogtatás/labdapattogtatasifnelul.c</filename>
            </link>,
            <link xlink:href="Turing/infty-w.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing//Labdapattogtatás/labdaiffel.py</filename>
            </link>.
        </para>
        <para>
            Ez a feladat jól bemutatja a végtelen ciklus alkalmazhatóságát egy feladatban, mivel a labda addig nem fog leállni amíg nem kap egy külső behatást. Ezt a programot először c nyelven írtam meg utána viszont átírtam Python-ra is, ami először nehéznek bizonyult azonban találtam egy pythonba importálható modult aminek a neve "turtle". Ezzel már jóval egyszerűbb volt egyszerűen megnéztem miként kell hozzáadni egy 2 dimenziós labdát, (csak ezt kell megadni, hogy milyen alakja legyen a "turtle"-nek) ezután lehet állítani háttérszínt hozzá, a turtle színét be lehet állítani, gravitációt hozzáadni.
        </para>
<para>
A programok fordítását a gcc labdapatt_if.c -o labdapatt_if -lncurses , illeteve a gcc labdapatt.c -o labdapatt -lncurses paranccsal végezzük.
</para>
    </section>                     
    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/9KnMqrkj_kU">https://youtu.be/9KnMqrkj_kU</link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/bogo/szohossz.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/bogo/szohossz.c</filename>
            </link>
        </para>
<para>
Ami fontos nekünk, hogy bitshift eltolással fogunk tologani addig egy 1-est amíg a memóriacím végre nem ér, amikor ez megtörtnik megvizsgálja, hogy képesek vagyunk mégegyszer eltoni, és amikor kijön, hogy nem addig a számláló ugye számolta ez az eltolás hányszor lehetséges és kilép a program. A végén pedig kiírja mennyi eltolásra volt képes a program.
</para>
<programlisting language="C"><![CDATA[
#include <iostream>

using namespace std;

int main()
{
    int a = 1;
    int osszeg = 0;

    while (a <<= 1)
        osszeg++;
    cout << osszeg+1 << endl;
}]]></programlisting>
<para>
A BogoMIPS lényegében ugyanazt a bitshift-es eltolást alkalmazza ebben az esetben egy egyet fog tolni és az hatványozódni fog és ezekkel a számokkal fog műveleteket csinálni, ha ez a lefutási idő túllép ez bizonyos legfutási időt akkor leállítja a programot. Ez valamilyen szinten a gép teljesítményét fogja mérni a program.
</para>
<mediaobject>
                <imageobject>
                    <imagedata fileref="img/bogo.png" scale="45" />
                </imageobject>
            </mediaobject>
<programlisting language="C"><![CDATA[
#include <time.h>
#include <stdio.h>

void
delay (unsigned long long loops)
{
  for (unsigned long long i = 0; i < loops; i++);
}

int
main (void)
{
  unsigned long long loops_per_sec = 1;
  unsigned long long ticks;

  printf ("Calibrating delay loop..");
  fflush (stdout);

  while ((loops_per_sec <<= 1))
    {
      printf(loops_per_sec);
      ticks = clock ();
      delay (loops_per_sec);
      ticks = clock () - ticks;

      if (ticks >= CLOCKS_PER_SEC)
	{
	  loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;

	  printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
		  (loops_per_sec / 5000) % 100);

	  return 0;
	}
    }

  printf ("failed\n");
  return -1;
}
}]]></programlisting>

    </section>

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
<para>
Megoldás forrása: <link xlink:href="Turing/pagerank/pagerank.c">
<filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/Pagerank/pagerank.c</filename>
</link>
</para>
<para>
A PageRank egy olyan algoritmus, amivel weboldalak relatív fontosságát lehet megállapítani. Alapja, hogy egy oldalon minden hivatkozás egy-egy "szavazat" a hivatkozott oldalra. Az alapján meg lehet állapítani egy oldal relatív fontosságát, hogy hány oldalra mutató hivatkozás van az oldalon és, hogy hány oldal hivatkozik erre az oldalra. Az algoritmusban egy jobb minőségű oldal "szavazata" erősebbnek számít, mint egy kis rekatív fontosságúé.
        </para>
<screen><![CDATA[
#include <stdio.h>
#include <math.h>

void
kiir (double tomb[], int db)
{
  int i;

  for (i = 0; i < db; ++i)
    printf ("%f\n", tomb[i]);
}

double
tavolsag (double PR[], double PRv[], int n)
{
  double osszeg = 0.0;
  int i;

  for (i = 0; i < n; ++i)
    osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);

  return sqrt(osszeg);
}

int
main (void)
{

  double L[4][4] = {
    {0.0, 0.0, 1.0 / 3.0, 0.0},
    {1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
    {0.0, 1.0 / 2.0, 0.0, 0.0},
    {0.0, 0.0, 1.0 / 3.0, 0.0}
  };

  double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
  double PRv[4] = { 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0 };

  int i, j;

  for (;;)
    {

      for (i = 0; i < 4; ++i)
  {
    PR[i] = 0.0;
    for (j = 0; j < 4; ++j)
      PR[i] += (L[i][j] * PRv[j]);
  }
      if (tavolsag (PR, PRv, 4) < 0.00000001)
  break;

      for (i = 0; i < 4; ++i)
  PRv[i] = PR[i];

    }

  kiir (PR, 4);

  return 0;
}
]]></screen>
<para>
A kódban meg vannak előre adva a pagerank értékek és ez alapján fog dolgozni a program. 
</para>
<para>
A forrásban láthatunk egy végtelen for ciklust, ami folyamatosan fogja iterálni. A program nem fog pontos értéket kiírni viszont közelíteni fog hozzá. Számolás után megnézi a program, hogy az előző értékhez képest mekkora az eltérés és ha nagyobb, mint 0.00000001 akkor újrakezdi a számolását, azonban, ha kisebb akkor megáll és kiírja az adott pagerank értékét az oldalnak.
</para>
<mediaobject>
                <imageobject>
                    <imagedata fileref="img/pagerank.png" scale="45" />
                </imageobject>
            </mediaobject>
    </section>
                                                                                                                                                                                                                                                                                                                                                        
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            A Monty Hall paradoxon vagy probléma egy régi TV-s műsorban jelent meg először, ahol a nyereményét a játékosnak bezárták egy random kiválasztott ajtó mögé 3-ból, ezután választania kellett egyet. Miután választott egyet a műsorvezető kinyitott egy olyan ajtót, ami mögött nem volt nyeremény és felajánlotta, hogy választhat a két maradt ajtó közül. A lényege az, hogy érdemes-e váltani a jelenlegi ajtóról a másikrra vagy sem. A megoldás az, hogy igen mivel annak az ejtónak dupla annyi esélye van a nyerésre, mint az elsőre kiválasztottnak.
        </para>
	<para>
	De hogy ez miért van, azt jól be lehet mutatni egy ábrával:
	</para>
	<screen><![CDATA[
	Monty Hall paradoxon:

			A <-- 		B				C($)


Tegyük fel, hogy a C ajtó mögött van a nyeremény.

Először a játékos az A ajtót választja. Ekkor a játékvezető csak
a B ajtót nyithatja ki és megmutatja, hogy amögött nincsen nyeremény.
Most vegyük két részre azt, hogy nyerni fog-e a játékos vagy sem.
Ha játékos nem változtatja meg a döntését akkor veszít (ahogyan
a táblázatban is látszik), ha megváltoztatja a döntését akkor
viszont nyer.


			A 		B <--				C($)

Ebben a körben a játékos a B ajtót választja, ekkor a
játékvezető kinyitja az A ajtót,ami mögött nyilván nincs
semmi. Ekkor a játékos, ha nem változtatja meg a döntését,
akkor veszít, ha megváltoztatja nyer pont mint az előző
körben.


			A 		B				C($) <--

Az utólsó körben a játékos a C ajtót választja ami
mögött a nyeremény is van. Ha nem változtatja meg a
döntését akkor nyer, ha megváltoztatja, akkor veszít.

---------------------------------------------------------------------------
										  1.körben					2.körben					3.körben

Megváltoztatja:				    Nyer 					  Nyer 						 Veszít


Nem változtatja meg:		  Veszít					 Veszít 					  Nyer

---------------------------------------------------------------------------

A táblázatban jól látszik, hogy mikor a játékos megváltoztatta a
döntését 2-szer nyert és 1-szer veszített, viszont ha nem akkor
2-szer veszített és csak 1-szer nyert.
	]]></screen>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>

        <para>
            A természetes számok építőelemei a prímszámok. Abban az értelemben, 
            hogy minden természetes szám előállítható prímszámok szorzataként.
            Például 12=2*2*3, vagy például 33=3*11.
        </para>
        <para>
            Prímszám az a természetes szám, amely csak önmagával és eggyel 
            osztható. Eukleidész görög matematikus már Krisztus előtt tudta, 
            hogy végtelen sok prímszám van, de ma sem tudja senki, hogy 
            végtelen sok ikerprím van-e. Két prím ikerprím, ha különbségük 2.
        </para>
        <para>
            Két egymást követő páratlan prím között a legkisebb távolság a 2, 
            a legnagyobb távolság viszont bármilyen nagy lehet! Ez utóbbit 
            könnyű bebizonyítani. Legyen n egy tetszőlegesen nagy szám. 
            Akkor szorozzuk össze n+1-ig a számokat, azaz számoljuk ki az 
            1*2*3*… *(n-1)*n*(n+1) szorzatot, aminek a neve (n+1) faktoriális, 
            jele (n+1)!.
        </para>
        <para>
            Majd vizsgáljuk meg az a sorozatot:
        </para>    
        <para>
            (n+1)!+2, (n+1)!+3,… , (n+1)!+n, (n+1)!+ (n+1) ez n db egymást követő azám, ezekre (a jól ismert
            bizonyítás szerint) rendre igaz, hogy            
        </para>    
        <itemizedlist>
            <listitem>
                <para>(n+1)!+2=1*2*3*… *(n-1)*n*(n+1)+2, azaz 2*valamennyi+2, 2 többszöröse, így ami osztható kettővel</para>
            </listitem>
            <listitem>
                <para>(n+1)!+3=1*2*3*… *(n-1)*n*(n+1)+3, azaz 3*valamennyi+3, ami osztható hárommal</para>
            </listitem>
            <listitem>
                <para>...</para>
            </listitem>
            <listitem>
                <para>(n+1)!+(n-1)=1*2*3*… *(n-1)*n*(n+1)+(n-1), azaz (n-1)*valamennyi+(n-1), ami osztható (n-1)-el</para>
            </listitem>
            <listitem>
                <para>(n+1)!+n=1*2*3*… *(n-1)*n*(n+1)+n, azaz n*valamennyi+n-, ami osztható n-el</para>
            </listitem>
            <listitem>
                <para>(n+1)!+(n+1)=1*2*3*… *(n-1)*n*(n+1)+(n-1), azaz (n+1)*valamennyi+(n+1), ami osztható (n+1)-el</para>
            </listitem>
        </itemizedlist>
        <para>
            tehát ebben a sorozatban egy prim nincs, akkor a (n+1)!+2-nél 
            kisebb első prim és a (n+1)!+ (n+1)-nél nagyobb első 
            prim között a távolság legalább n.            
        </para>    
        <para>
            Az ikerprímszám sejtés azzal foglalkozik, amikor a prímek közötti 
            távolság 2. Azt mondja, hogy az egymástól 2 távolságra lévő prímek
            végtelen sokan vannak.
        </para>    
        <para>
            A Brun tétel azt mondja, hogy az ikerprímszámok reciprokaiból képzett sor összege, azaz
            a (1/3+1/5)+ (1/5+1/7)+ (1/11+1/13)+... véges vagy végtelen sor konvergens, ami azt jelenti, hogy ezek
            a törtek összeadva egy határt adnak ki pontosan vagy azt át nem lépve növekednek, 
            ami határ számot B<subscript>2</subscript> Brun konstansnak neveznek. Tehát ez
            nem dönti el a több ezer éve nyitott kérdést, hogy az ikerprímszámok halmaza végtelen-e? 
            Hiszen ha véges sok van és ezek
            reciprokait összeadjuk, akkor ugyanúgy nem lépjük át a B<subscript>2</subscript> Brun konstans értékét, 
            mintha végtelen 
            sok lenne, de ezek már csak olyan csökkenő mértékben járulnának hozzá a végtelen sor összegéhez, 
            hogy így sem lépnék át a Brun konstans értékét.     
        </para>
        <para>
            Ebben a példában egy olyan programot készítettünk, amely közelíteni próbálja a Brun konstans értékét.
            A repó <link xlink:href="../../../bhax/attention_raising/Primek_R/stp.r">
                <filename>bhax/attention_raising/Primek_R/stp.r</filename>
            </link> mevű állománya kiszámolja az ikerprímeket, összegzi
            a reciprokaikat és vizualizálja a kapott részeredményt.
        </para>
        <programlisting language="R">
<![CDATA[#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>

library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
]]>
        </programlisting>        
        <para>
            Soronként értelemezzük ezt a programot:
        </para>                
        <programlisting language="R">
<![CDATA[ primes = primes(13)]]>
        </programlisting>        
        <para>
            Kiszámolja a megadott számig a prímeket.             
        </para>
        <screen>
<![CDATA[> primes=primes(13)
> primes
[1]  2  3  5  7 11 13
]]>
        </screen>
                
        <programlisting language="R">
<![CDATA[ diff = primes[2:length(primes)]-primes[1:length(primes)-1]]]>
        </programlisting>        
        <screen>
<![CDATA[> diff = primes[2:length(primes)]-primes[1:length(primes)-1]
> diff
[1] 1 2 2 4 2
]]>
        </screen>        
        <para>
            Az egymást követő prímek különbségét képzi, tehát 3-2, 5-3, 7-5, 11-7, 13-11.
        </para>
        <programlisting language="R">
<![CDATA[idx = which(diff==2)]]>
        </programlisting>        
        <screen>
<![CDATA[> idx = which(diff==2)
> idx
[1] 2 3 5
]]>
        </screen>              
        <para>
            Megnézi a <varname>diff</varname>-ben, hogy melyiknél lett kettő az eredmény, mert azok az ikerprím párok, ahol ez igaz.
            Ez a <varname>diff</varname>-ben lévő 3-2, 5-3, 7-5, 11-7, 13-11 külünbségek közül ez a 2., 3. és 5. indexűre teljesül.
        </para>
        <programlisting language="R">
<![CDATA[t1primes = primes[idx]]]>
        </programlisting>  
        <para>
            Kivette a primes-ból a párok első tagját. 
        </para>
        <programlisting language="R">
<![CDATA[t2primes = primes[idx]+2]]>
        </programlisting>        
        <para>
            A párok második tagját az első tagok kettő hozzáadásával képezzük.
        </para>
        <programlisting language="R">
<![CDATA[rt1plust2 = 1/t1primes+1/t2primes]]>
        </programlisting>        
        <para>
            Az 1/t1primes a t1primes 3,5,11 értékéből az alábbi reciprokokat képzi:
        </para>
        <screen>
<![CDATA[> 1/t1primes
[1] 0.33333333 0.20000000 0.09090909
]]>
        </screen>                      
        <para>
            Az 1/t2primes a t2primes 5,7,13 értékéből az alábbi reciprokokat képzi:
        </para>
        <screen>
<![CDATA[> 1/t2primes
[1] 0.20000000 0.14285714 0.07692308
]]>
        </screen>                      
        <para>
            Az 1/t1primes + 1/t2primes pedig ezeket a törteket rendre összeadja.
        </para>
        <screen>
<![CDATA[> 1/t1primes+1/t2primes
[1] 0.5333333 0.3428571 0.1678322
]]>
        </screen>                      
        <para>
            Nincs más dolgunk, mint ezeket a törteket összeadni a 
            <function>sum</function> függvénnyel.
        </para>
        
        <programlisting language="R">
<![CDATA[sum(rt1plust2)]]>
        </programlisting>    
        <screen>
<![CDATA[>   sum(rt1plust2)
[1] 1.044023
]]>
        </screen>            
        <para>
            A következő ábra azt mutatja, hogy a szumma értéke, hogyan nő, egy határértékhez tart, a 
            B<subscript>2</subscript> Brun konstanshoz. Ezt ezzel a csipettel rajzoltuk ki, ahol először a fenti 
            számítást 13-ig végezzük, majd 10013, majd 20013-ig, egészen 990013-ig, azaz közel 1 millióig.
            Vegyük észre, hogy az ábra első köre, a 13 értékhez tartozó 1.044023.
        </para>
        <programlisting language="R">
<![CDATA[x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")]]>
        </programlisting>          
        <figure>
            <title>A B<subscript>2</subscript> konstans közelítése</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/BrunKorok.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A B<subscript>2</subscript> konstans közelítése</phrase>
                </textobject>
            </mediaobject>
        </figure>
<para>
A Brun-tétel szerint az ikerprímek reciprokösszege egy meghatározható szám felé tart, amelyet a B2 konstansal jelölnek, amelyértéke B2=1,902160583104. Az ikerprím olyan két egymást követő prímszámot jelent, amelyek különbsége 2.
</para>
        <tip>
            <title>Werkfilm</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/VkMFrgBhN1g">https://youtu.be/VkMFrgBhN1g</link>
                    </para>    
                </listitem>                
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/aF4YK6mBwf4">https://youtu.be/aF4YK6mBwf4</link>
                    </para>    
                </listitem>                
            </itemizedlist>                
        </tip>
    </section>

<section>
        <title>Vörös Pipacs Pokol/csiga folytonos mozgási parancsokkal</title>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/VXtpJFjIh1o">https://youtu.be/VXtpJFjIh1o</link>      
        </para>            
    </section>


</chapter>
